name: Function Composition Bench

on:
  workflow_run:
    workflows: ["Function Composition Push"]
    branches: [main]
    pull_request:
      branches: [ main ]
    types: 
      - completed
  
env:
  GOOS: linux
  GO111MODULE: on

jobs:
  bench-docker-compose-serving:
    name: Serving uBenchmark (docker-compose)
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v2

    - name: Setup grpcurl
      run: |
        wget -qO- https://github.com/fullstorydev/grpcurl/releases/download/v1.8.1/grpcurl_1.8.1_linux_x86_64.tar.gz | sudo tar -C /usr/bin/ -xz grpcurl

    - name: start multi-container program with docker-compose
      run: |
        cd ./function-images/tests/chained-function-serving/
        docker-compose up &> log_file &
        sleep 15s
    - name: invoke the chain
      run: |
        grpcurl -plaintext localhost:3031 helloworld.Greeter.SayHello
    - name: show docker-compose log
      run: cat  ./function-images/tests/chained-function-serving/log_file
        
  bench-serving:
    name: Serving uBenchmark (Knative)
    env:
        GITHUB_RUN_ID: ${{ github.run_id }}
        LOGPATH: /tmp/uBench-logs/${{ github.run_id }}
        GOCACHE: /root/tmp/gocache
        GOPATH: /root/tmp/gopath
    runs-on: [self-hosted, cri]
    strategy:
      fail-fast: false
    steps:

    - name: Set up Golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Setup LOGPATH
      run: |
        mkdir -p /tmp/uBench-logs/${{ github.run_id }}

    - name: Host Info
      run: |
        echo $HOSTNAME
        echo $GITHUB_RUN_ID
        echo $LOGPATH

    - uses: actions/checkout@v2

    - name: Start containerd
      run: sudo containerd 1>$LOGPATH/uBench.out 2>$LOGPATH/uBench.err &

    - name: Start one-node cluster
      run : |
        ./scripts/cluster/create_one_node_cluster.sh stock-only && sleep 2m

    - name: Start consumer
      run: KUBECONFIG=/etc/kubernetes/admin.conf kn service apply -f ./function-images/tests/chained-function-serving/service-consumer.yaml && sleep 30s

    - name: Start producer
      run: KUBECONFIG=/etc/kubernetes/admin.conf kn service apply -f ./function-images/tests/chained-function-serving/service-producer.yaml && sleep 30s

    # First use grpcurl to invoke and then use the invoker in the same
    # job, since invoker would consider timeouts as an error so if
    # function deployment failed, the CI would not catch an error.
    - name: grpcurl
      run: |
        ./bin/grpcurl -d '{\"name\": \"Michal\"}'  -plaintext producer.default.192.168.1.240.sslip.io:80 helloworld.Greeter.SayHello

    - name: Run invoker client
      run: |
        echo '[ { "hostname": "producer.default.192.168.1.240.sslip.io" } ]' > endpoints.json
        (cd examples/invoker; go build github.com/ease-lab/vhive/examples/invoker)
        ./examples/invoker/invoker -rps 10 -time 5

    - name: Test results
      run: |
        test $(wc -l < rps10.00_lat.csv) -eq 50

    - name: Inspect logs
      run: |
        cat rps*lat.csv

    - name: Archive log artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: /tmp/uBench-logs/${{ github.run_id }}

    - name: Cleaning
      if: ${{ always() }}
      run: ./scripts/github_runner/clean_cri_runner.sh stock-only

  bench-eventing:
    name: Eventing uBenchmark (Knative)
    env:
        GITHUB_RUN_ID: ${{ github.run_id }}
        LOGPATH: /tmp/uBench-logs/${{ github.run_id }}
        GOCACHE: /root/tmp/gocache
        GOPATH: /root/tmp/gopath
    runs-on: [self-hosted, cri]
    strategy:
      fail-fast: false
    steps:
    - name: Set up Golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Setup LOGPATH
      run: |
        mkdir -p /tmp/uBench-logs/${{ github.run_id }}

    - name: Host Info
      run: |
        echo $HOSTNAME
        echo $GITHUB_RUN_ID
        echo $LOGPATH

    - uses: actions/checkout@v2

    - name: Start containerd
      run: sudo containerd 1>$LOGPATH/containerd.out 2>$LOGPATH/containerd.err &

    - name: Start one-node cluster
      run : |
        ./scripts/cluster/create_one_node_cluster.sh stock-only && sleep 2m

    - name: Start consumer and producer
      run: KUBECONFIG=/etc/kubernetes/admin.conf ./function-images/tests/chained-function-eventing/manifests/apply.sh && sleep 30s

    - name: Describe
      run: |
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl get -n chained-functions-eventing broker
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl get -n chained-functions-eventing sinkbinding
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl get -n chained-functions-eventing ksvc
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl get -n chained-functions-eventing trigger

    # First use grpcurl to invoke and then use the invoker in the same
    # job, since invoker would consider timeouts as an error so if
    # function deployment failed, the CI would not catch an error.
    - name: grpcurl
      run: |
        ./bin/grpcurl -d '{\"name\": \"Bora\"}'  -plaintext producer.chained-functions-eventing.192.168.1.240.sslip.io:80 helloworld.Greeter.SayHello

    - name: Invoke
      run: |
        (cd examples/invoker; go build github.com/ease-lab/vhive/examples/invoker)
        ./examples/invoker/invoker -rps 10 -time 5 -endpointsFile ./function-images/tests/chained-function-eventing/endpoints.json

    - name: Inspect logs
      run: |
        cat rps*lat.csv
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl logs -n chained-functions-eventing -c user-container -l serving.knative.dev/service=producer
        KUBECONFIG=/etc/kubernetes/admin.conf kubectl logs -n chained-functions-eventing -c user-container -l serving.knative.dev/service=consumer

    - name: Test results
      run: |
        test $(wc -l < rps10.00_lat.csv) -eq 50

    - name: Archive log artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: /tmp/uBench-logs/${{ github.run_id }}

    - name: Delete
      run: KUBECONFIG=/etc/kubernetes/admin.conf ./function-images/tests/chained-function-eventing/manifests/delete.sh

    - name: Cleaning
      if: ${{ always() }}
      run: ./scripts/github_runner/clean_cri_runner.sh stock-only

  bench-video-compose:
    name: Video Analytics (docker-compose)
    runs-on: ubuntu-18.04
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v2

    - name: start multi-container program with docker-compose
      run: |
        cd ./function-images/tests/video-bench/
        docker-compose up &> log_file &
        sleep 15s
    - name: invoke the chain
      run: |
        ./bin/grpcurl -plaintext localhost:50051 helloworld.Greeter.SayHello
    - name: show docker-compose log
      run: cat  ./function-images/tests/chained-function-serving/log_file

  bench-video-knative:
    name: Video Analytics (Knative)
    env:
        GITHUB_RUN_ID: ${{ github.run_id }}
        LOGPATH: /tmp/uBench-logs/${{ github.run_id }}
        GOCACHE: /root/tmp/gocache
        GOPATH: /root/tmp/gopath
    runs-on: [self-hosted, cri]
    strategy:
      fail-fast: false
    steps:

    - name: Set up Golang
      uses: actions/setup-go@v2
      with:
        go-version: 1.16

    - name: Setup LOGPATH
      run: |
        mkdir -p /tmp/uBench-logs/${{ github.run_id }}

    - name: Host Info
      run: |
        echo $HOSTNAME
        echo $GITHUB_RUN_ID
        echo $LOGPATH

    - uses: actions/checkout@v2

    - name: Start containerd
      run: sudo containerd 1>$LOGPATH/uBench.out 2>$LOGPATH/uBench.err &

    - name: Start one-node cluster
      run : |
        ./scripts/cluster/create_one_node_cluster.sh stock-only && sleep 2m

    - name: Start recog
      run: KUBECONFIG=/etc/kubernetes/admin.conf kn service apply -f ./function-images/tests/video-bench/service-recog.yaml && sleep 30s

    - name: Start decoder
      run: KUBECONFIG=/etc/kubernetes/admin.conf kn service apply -f ./function-images/tests/video-bench/service-decoder.yaml && sleep 30s

    - name: Start streaming
      run: KUBECONFIG=/etc/kubernetes/admin.conf kn service apply -f ./function-images/tests/video-bench/service-streaming.yaml && sleep 30s

    # First use grpcurl to invoke and then use the invoker in the same
    # job, since invoker would consider timeouts as an error so if
    # function deployment failed, the CI would not catch an error.
    - name: grpcurl
      run: |
        ./bin/grpcurl -plaintext streaming.default.192.168.1.240.sslip.io:80 helloworld.Greeter.SayHello

    - name: Run invoker client
      run: |
        echo '[ { "hostname": "streaming.default.192.168.1.240.sslip.io" } ]' > endpoints.json
        (cd examples/invoker; go build github.com/ease-lab/vhive/examples/invoker)
        ./examples/invoker/invoker -rps 10 -time 5

    - name: Test results
      run: |
        test $(wc -l < rps10.00_lat.csv) -eq 50

    - name: Inspect logs
      run: |
        cat rps*lat.csv

    - name: Archive log artifacts
      uses: actions/upload-artifact@v2
      with:
        name: logs
        path: /tmp/uBench-logs/${{ github.run_id }}

    - name: Cleaning
      if: ${{ always() }}
      run: ./scripts/github_runner/clean_cri_runner.sh stock-only